<%= simple_form_for( @profile ) do |f| %>
    <%= f.error_notification %>

    <% if f.error_notification %>
        <div class="alert alert-error fade in">
            <ul>
                <%  @profile.errors.each do |attribute| %>
                    <% if attribute != :plugins %>
                        <li><%= attribute.to_s.humanize %> <%= f.error attribute %></li>
                    <% else  %>
                        <li><%= attribute.to_s.humanize %> <pre class="alert-error"><%= f.error attribute %></pre></li>
                    <% end  %>
                <% end %>
            </ul>
        </div>
    <% end %>

    <header class="jumbotron subhead" id="overview">
        <div class="row-fluid">
            <div class="col-md-6">
                <%= f.input :name, label: false, placeholder: '(Required) Name' %>
            </div>
        </div>

        <div class="row-fluid">
            <div class="col-md-6">
                <%= f.input :description, label: false, placeholder: '(Required) Description',
                            hint: 'You can use Markdown for text formatting.',
                            input_html: { rows: 5, cols: 100 } %>
            </div>
        </div>
    </header>

    <% if @profile.scans.any? %>
        <div class="row-fluid">
            <div class="col-md-12">
                <h2>
                    <%= @profile.scans.size %> associated
                    <%= 'scan'.pluralize @profile.scans.size %>
                </h2>

                <ol>
                    <% @profile.scans.each do |scan| %>
                        <li>
                            <%= link_to scan.name, [scan.site, scan] %> of
                            <%= link_to scan.site, scan.site %>
                        </li>
                    <% end %>
                </ol>
            </div>
        </div>
    <% end %>

    <section id="scope">
        <fieldset>
            <legend id="scope-h">
                Scope
                <small>Rules about which resources to include</small>
            </legend>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :scope_redundant_path_patterns, input_html: {
                            value: @profile.scope_redundant_path_patterns.
                                           map { |k, v| "#{k}:#{v}" }.join( "\n" )
                    } %>

                    <%= messages_for( :scope_redundant_path_patterns ) %>
                    <p class="alert alert-info">
                        Rules take the format of <em>pattern:times</em>,
                        input each rule in its own line.
                    </p>
                </div>
                <div class="col-md-6">
                    <%= f.input :scope_exclude_content_patterns, input_html: { value: @profile.scope_exclude_content_patterns.join( "\n" ) } %>

                    <%= messages_for( :scope_exclude_content_patterns ) %>
                    <p class="alert alert-info">Input each rule in its own line.</p>
                </div>
            </div>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :scope_exclude_path_patterns, input_html: { value: @profile.scope_exclude_path_patterns.join( "\n" ) } %>
                    <%= messages_for( :scope_exclude_path_patterns ) %>
                    <p class="alert alert-info">Input each rule in its own line.</p>
                </div>
                <div class="col-md-6">
                    <%= f.input :scope_include_path_patterns, input_html: { value: @profile.scope_include_path_patterns.join( "\n" ) } %>
                    <%= messages_for( :scope_include_path_patterns ) %>
                    <p class="alert alert-info">Input each rule in its own line.</p>
                </div>
            </div>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :scope_restrict_paths, input_html: { value: @profile.scope_restrict_paths.join( "\n" ) } %>
                    <%= messages_for( :scope_restrict_paths ) %>
                    <p class="alert alert-info">Input each path in its own line.</p>
                </div>
                <div class="col-md-6">
                    <%= f.input :scope_extend_paths, input_html: { value: @profile.scope_extend_paths.join( "\n" ) } %>
                    <%= messages_for( :scope_extend_paths ) %>
                    <p class="alert alert-info">Input each path in its own line.</p>
                </div>
            </div>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :scope_url_rewrites, input_html: {
                            value: @profile.scope_url_rewrites.
                                           map { |k, v| "#{k}:#{v}" }.join( "\n" )
                    } %>
                    <%= messages_for( :scope_url_rewrites ) %>
                    <p class="alert alert-info">
                        Rules take the format of <em>pattern:substitution</em>,
                        input each rule in its own line.<br/>

                        For example, to convert <code>http://test.com/articles/some-stuff/23</code> to
                        <code>http://test.com/articles.php?id=23</code> use
                        <code>/articles\/[\w-]+\/(\d+)/:articles.php?id=\1</code>.
                    </p>
                </div>
            </div>

        </fieldset>
    </section>

    <section id="audit">
        <fieldset>
            <legend id="audit-h">
                Audit
                <small>How the scanner will audit web application inputs</small>
            </legend>

            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :audit_forms %>
                    <%= messages_for( :audit_forms ) %>
                </div>
                <div class="col-md-6">
                    <%= f.input :audit_links %>
                    <%= messages_for( :audit_links ) %>
                </div>
            </div>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :audit_cookies %>
                    <%= messages_for( :audit_cookies ) %>
                </div>
                <div class="col-md-6">
                </div>
            </div>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :audit_exclude_vector_patterns,
                                input_html: { value: @profile.audit_exclude_vector_patterns.join( "\n" ) } %>

                    <%= messages_for( :audit_exclude_vector_patterns ) %>
                    <p class="alert alert-info">Input one pattern per line.</p>
                </div>
                <div class="col-md-6">
                    <%= f.input :audit_include_vector_patterns,
                                input_html: { value: @profile.audit_include_vector_patterns.join( "\n" ) } %>

                    <%= messages_for( :audit_include_vector_patterns ) %>
                    <p class="alert alert-info">Input one pattern per line.</p>
                </div>
            </div>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :audit_link_templates, input_html: { value: @profile.audit_link_templates.join( "\n" ) } %>

                    <%= messages_for( :audit_link_templates ) %>
                    <p class="alert alert-info">
                        For example, to extract the <code>input1</code> and <code>input2</code> inputs from
                        <code>http://test.com/input1/value1/input2/value2</code> use
                        <code>/input1\/(?&lt;input1&gt;\w+)\/input2\/(?&lt;input2&gt;\w+)/</code>.
                    </p>
                </div>
            </div>

        </fieldset>
    </section>

    <section id="input">
        <fieldset>
            <legend id="input-h">
                Input
                <small>Values to use to fill in inputs</small>
            </legend>

            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :input_values, input_html: {
                            value: @profile.input_values.
                                           map { |k, v| "#{k}=#{v}" }.join( "\n" )
                    } %>
                    <%= messages_for( :input_values ) %>
                    <p class="alert alert-info">
                        Rules take the format of <em>name=value</em>,
                        input each rule in its own line -- <kbd>name</kbd> can be a pattern.
                    </p>
                </div>
            </div>
        </fieldset>
    </section>

    <section id="http">
        <fieldset>
            <legend id="http-h">
                HTTP
                <small>How the scanner will communicate with the web application</small>
            </legend>

            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :http_authentication_username %>
                    <%= messages_for( :http_authentication_username ) %>
                </div>
                <div class="col-md-6">
                    <%= f.input :http_authentication_password, as: :string %>
                    <%= messages_for( :http_authentication_password ) %>
                </div>
            </div>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :http_user_agent, as: :string %>
                    <%= messages_for( :http_user_agent ) %>
                </div>
                <div class="col-md-6">
                </div>
            </div>
            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :http_cookies, input_html: {
                            value: @profile.http_cookies.map { |k, v| "#{k}=#{v}" }.join( "\n" )
                    } %>

                    <%= messages_for( :http_cookies ) %>
                    <p class="alert alert-info">
                        Cookies take the format of <em>name=value</em>,
                        input each cookie in its own line.
                    </p>
                </div>
                <div class="col-md-6">
                    <%= f.input :http_request_headers, input_html: {
                            value: @profile.http_request_headers.map { |k, v| "#{k}=#{v}" }.join( "\n" )
                    } %>

                    <%= messages_for( :http_request_headers ) %>
                    <p class="alert alert-info">
                        Headers take the format of <em>name=value</em>,
                        input each header in its own line.
                    </p>
                </div>
            </div>
        </fieldset>
    </section>

    <section id="fingerprinting">
        <fieldset>
            <legend id="fingerprinting-h">
                Platform fingerprinting
                <small>What platforms should the scanner anticipate</small>
            </legend>

            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :no_fingerprinting,
                                label: 'Disable fingerprinting'
                    %>
                </div>
            </div>

            <h4>
                Platforms
                <small>Explicitly specify platforms to improve efficiency</small>
            </h4>

            <div class="row-fluid">
                <% [:os, :db, :servers, :languages, :frameworks].each_with_index do |type, i| %>
                    <div class="col-md-2">
                        <h5><%= platform_type_fullname( type ) %></h5>
                        <%= f.input :platforms, collection: valid_platforms( type ),
                                    label:  false,
                                    as: :check_boxes,
                                    label_method: lambda { |p| platform_fullname( p ) }
                        %>
                    </div>
                <% end %>
            </div>

        </fieldset>
    </section>

    <section id="checks">
        <fieldset>
            <legend id="checks-h">
                Checks
                <small>The security checks to be run again the web application</small>
            </legend>

            <div class="row-fluid">
                <div class="col-md-3">
                    <input id="search" type="text" class="string optional"
                           placeholder="Filter modules by name or description">
                </div>

                <div class="col-md-2">
                    <button class="btn btn-small check">Check all</button>
                    <button class="btn btn-small uncheck">Uncheck all</button>
                </div>
            </div>

            <h4>
                Active
                <small>These checks will actively engage the web application via its inputs (links, forms, etc.)</small>
            </h4>
            <% active = checks.select { |n, i| i[:path].include?( '/checks/active' ) } %>
            <% if active.any? %>
                <%= render partial: '/shared/components_twin_accordion_form',
                           locals: {
                                   components: active,
                                   form:       f,
                                   selected:   @profile.checks,
                                   input:      :checks,
                                   class_name: 'col-md-6'
                           } %>
            <% else %>
                <p class="alert alert-info">No active checks are available.</p>
            <% end %>

            <h4>
                Passive
                <small>These checks will passively collect data</small>
            </h4>
            <% passive = checks.select { |n, i| i[:path].include?( '/checks/passive' ) } %>
            <% if passive.any? %>
                <%= render partial: '/shared/components_twin_accordion_form',
                           locals: {
                                   components: passive,
                                   form:       f,
                                   selected:   @profile.checks,
                                   input:      :checks,
                                   class_name: 'col-md-6'
                           } %>
            <% else %>
                <p class="alert alert-info">No passive checks are available.</p>
            <% end %>

        </fieldset>
    </section>

    <section id="browser_cluster">
        <fieldset>
            <legend id="browser_cluster-h">
                Browser cluster
                <small>Browser-related options</small>
            </legend>

            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :browser_cluster_screen_width %>
                    <%= messages_for( :browser_cluster_screen_width ) %>
                </div>
                <div class="col-md-6">
                    <%= f.input :browser_cluster_screen_height %>
                    <%= messages_for( :browser_cluster_screen_height ) %>
                </div>
            </div>
        </fieldset>
    </section>

    <section id="login">
        <fieldset>
            <legend id="login-h">
                Login check
                <small>How the scanner will determine its session's validity</small>
            </legend>

            <div class="row-fluid">
                <div class="col-md-6">
                    <%= f.input :session_check_url, as: :string, label: false,
                                placeholder: 'Login check URL' %>
                    <%= messages_for( :session_check_url ) %>
                </div>
                <div class="col-md-6">
                    <%= f.input :session_check_pattern, as: :string, label: false,
                                placeholder: 'Login check pattern' %>
                    <%= messages_for( :session_check_pattern ) %>
                </div>
            </div>
        </fieldset>
    </section>

    <div class="form-actions">
        <%= f.button :submit %>
    </div>
<% end %>
