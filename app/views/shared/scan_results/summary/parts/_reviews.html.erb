<%
   count = 0
   by_state = {}
   entries   = @summary[:reviews]

   group_entries = proc do |group, entry|
       state = entry.auto_review_status

       count += 1

       group[state] ||= []
       group[state] << entry
   end

   if entries.is_a? Array
       entries.each do |entry|
           group_entries.call by_state, entry
       end
   else
       scoped_find_each( entries ) do |entry|
           group_entries.call by_state, entry
       end
   end

   {
           'regression'     => 'regression',
           'fixed'          => 'fixed',
           'false_positive' => 'false_positive'
   }.each do |k, v|
       next if !by_state.include?( k )
       by_state[v] = by_state.delete(k)
   end
%>

<% if count > 0 %>
    <div class="live-stream-entry">
        <% by_state.each do |state, entry_group| %>

            <div class="row">
                <div class="col-md-12">
                    <h3>
                        <%= entry_group.size %> <%= state %>
                        <%= 'entry'.pluralize entry_group.size %>
                    </h3>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <ul class="list-unstyled">
                        <% entry_group.each do |entry| %>
                            <li>
                                <%= render partial: '/shared/scan_results/summary/parts/entry',
                                               locals: { entry: entry } %>
                            </li>
                        <% end %>
                    </ul>
                </div>
            </div>
        <% end %>
    </div>
<% end %>
